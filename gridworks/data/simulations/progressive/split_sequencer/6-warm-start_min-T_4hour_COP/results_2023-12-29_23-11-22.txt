(ada) thomasdefauw@mbp gridworks % python master.py

Problem type: Non-linear
Variables: Continuous (relaxed or fixed binary)
Solver: Ipopt

Time step: 2 minutes
Horizon: 4.0 hours (120 time steps)
Simulation: 10 hours (10 iterations)

Results file (enter to skip): 

#########################################
Buffer: [314.0, 314.6, 313.7, 308.8] 
Storage: [310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310]
Electricity forecasts: [14.64, 18.93, 45.56, 26.42]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] is feasible. Testing for combi2:
- combi1=[1, 0, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[1, 1, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] has cost 2.663 $.
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] will be more expensive than current minimum
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] will be more expensive than current minimum
Minimum cost 2.66$ achieved for {'combi1': [1, 1, 1], 'combi2': [1, 0, 1], 'combi3': [1, 0, 1], 'combi4': [0, 0, 0]}
Data was appended to results_2023-12-29_21-25-38.csv
#########################################

-----------------------------------------------------
Iteration 1.0 (0h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 0, 1]
1h00-1h30: [1, 0, 1]
1h30-2h00: [0, 0, 0]

Solving the optimization problem...
Done in 104.8 seconds.

Initial state
B     -- 314.0 | S        310.0 --    310.0 --   310.0 --
         314.6 |          310.0       310.0      310.0
         313.7 |          310.0       310.0      310.0
      -- 308.8 |       -- 310.0    -- 310.0   -- 310.0

Next state
B -0.0-> 313.5 | S        312.3 <-    313.7 <-   314.0 <-0.3-
         314.4 |          311.7       313.5      314.0
         314.0 |          311.2       313.3      314.0
  <-0.0- 310.4 |   <-0.3- 310.7    <- 312.8   <- 314.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000]
Cost of next 4 hours: 2.66 $
[14.64, 18.93, 45.56, 26.42]

#########################################
Buffer: [313.5307508628812, 314.4074225130784, 313.98886648634425, 310.37271715491346] 
Storage: [314.1268504045171, 313.92733187419265, 313.81540062242163, 313.7453991279923, 313.6653151059113, 313.5180832095374, 313.2516711093483, 312.8409743382864, 312.3078252379776, 311.71995168122277, 311.16423131890775, 310.71052472871133]
Electricity forecasts: [18.93, 45.56, 26.42, 18.0]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] is feasible. Testing for combi2:
- combi1=[1, 0, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[0, 1, 0] is feasible. Testing for combi3:
-- combi1=[1, 0, 1], combi2=[0, 1, 0], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 0, 1], combi2=[0, 1, 0], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 0, 1], combi2=[0, 1, 0], combi3=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
^CCasADi - 2023-12-29 22:19:17 WARNING("KeyboardInterruptException") [.../casadi/interfaces/ipopt/ipopt_nlp.cpp:132]
-- combi1=[1, 0, 1], combi2=[0, 1, 0], combi3=[1, 1, 1] could not be solved: 'NonIpopt_Exception_Thrown'
^CTraceback (most recent call last):
  File "master.py", line 68, in <module>
    if file_path == "": sequence = forecasts.get_optimal_sequence(x_0, 30*iter, x_opt, u_opt)
  File "/Users/thomasdefauw/Desktop/repo/gridworks/forecasts.py", line 236, in get_optimal_sequence
    cost2, x_opt, u_opt, error = one_iteration(initial_state, iter, sequence, 60, x_opt_prev, u_opt_prev)
  File "/Users/thomasdefauw/Desktop/repo/gridworks/forecasts.py", line 160, in one_iteration
    u_opt, x_opt, obj_opt, error = optimizer.optimize_N_steps(x_0, 0, iter, pb_type, sequence, warm_start, False)
  File "/Users/thomasdefauw/Desktop/repo/gridworks/optimizer.py", line 206, in optimize_N_steps
    opti.subject_to(x[i,t] >= T_w_min)
  File "/Users/thomasdefauw/miniconda3/envs/ada/lib/python3.8/site-packages/casadi/casadi.py", line 48965, in subject_to
    ret = self._subject_to(*args)
  File "/Users/thomasdefauw/miniconda3/envs/ada/lib/python3.8/site-packages/casadi/casadi.py", line 47545, in _subject_to
    return _casadi.Opti__subject_to(self, *args)
KeyboardInterrupt

(ada) thomasdefauw@mbp gridworks % python master.py

Problem type: Non-linear
Variables: Continuous (relaxed or fixed binary)
Solver: Ipopt

Time step: 2 minutes
Horizon: 4.0 hours (120 time steps)
Simulation: 10 hours (10 iterations)

Results file (enter to skip): 
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [314.0, 314.6, 313.7, 308.8] 
Storage: [310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310]
Electricity forecasts: [14.64, 18.93, 45.56, 26.42]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] is feasible. Testing for combi2:
- combi1=[1, 0, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[1, 1, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] has cost 2.663 $.
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 2.467 $.
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] has cost 1.78 $.
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible but more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible but more expensive than current minimum
Minimum cost 1.78$ achieved for {'combi1': [1, 1, 1], 'combi2': [1, 1, 1], 'combi3': [0, 0, 0], 'combi4': [1, 1, 1]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 1.0 (0h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [0, 0, 0]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 62.1 seconds.

Initial state
B     -- 314.0 | S        310.0 --    310.0 --   310.0 --
         314.6 |          310.0       310.0      310.0
         313.7 |          310.0       310.0      310.0
      -- 308.8 |       -- 310.0    -- 310.0   -- 310.0

Next state
B -0.3-> 323.2 | S        310.0 <-    310.0 <-   310.0 <-0.0-
         322.2 |          310.0       310.0      310.0
         321.3 |          310.0       310.0      310.0
  <-0.3- 320.4 |   <-0.0- 310.0    <- 310.0   <- 310.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000]
Cost of next 4 hours: 1.78 $
[14.64, 18.93, 45.56, 26.42]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [323.1745757849743, 322.2406157349223, 321.30626973720126, 320.37123541740874] 
Storage: [309.9999988194162, 310.0, 310.0, 310.0, 310.0, 310.0, 310.0, 310.0, 310.0, 310.0, 310.0, 310.0]
Electricity forecasts: [18.93, 45.56, 26.42, 18.0]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[1, 0, 1] has cost 1.774 $.
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 1.667 $.
- combi1=[1, 1, 1], combi2=[0, 1, 0] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1], combi4=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1], combi4=[1, 0, 1] has cost 1.766 $.
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 1.603 $.
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] is feasible but more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] will be more expensive than current minimum
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible but more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0], combi4=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] will be more expensive than current minimum
Minimum cost 1.6$ achieved for {'combi1': [1, 1, 1], 'combi2': [0, 1, 0], 'combi3': [1, 1, 1], 'combi4': [1, 1, 1]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 2.0 (1h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [0, 1, 0]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 54.2 seconds.

Initial state
B     -- 323.2 | S        310.0 --    310.0 --   310.0 --
         322.2 |          310.0       310.0      310.0
         321.3 |          310.0       310.0      310.0
      -- 320.4 |       -- 310.0    -- 310.0   -- 310.0

Next state
B -0.1-> 316.6 | S        312.6 <-    314.6 <-   311.0 <-0.2-
         319.4 |          311.6       315.0      311.0
         320.9 |          310.9       314.6      312.0
  <-0.1- 321.3 |   <-0.2- 310.4    <- 313.7   <- 314.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 11966, 10559, 10557, 10552, 10544, 9583, 8000, 8000, 8000, 8000, 10302, 10189]
Cost of next 4 hours: 1.6 $
[18.93, 45.56, 26.42, 18.0]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [316.55913064924533, 319.4393398919429, 320.8605638666304, 321.3206149217237] 
Storage: [311.07068763678063, 311.4387823752938, 312.31467761980394, 313.5480255467309, 314.6135882176277, 315.01206399287605, 314.61878051473053, 313.67538958613864, 312.5585685320541, 311.57013856250177, 310.852658775484, 310.4103707241733]
Electricity forecasts: [45.56, 26.42, 18.0, 17.17]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] is feasible. Testing for combi2:
- combi1=[0, 1, 0], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[0, 1, 0], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[0, 1, 0], combi2=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[0, 1, 0], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] has cost 1.583 $.
--- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] has cost 1.583 $.
-- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.509 $.
--- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] has cost 1.572 $.
--- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] has cost 1.553 $.
--- combi1=[0, 1, 0], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 1.411 $.

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] is feasible. Testing for combi2:
- combi1=[1, 0, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[0, 1, 0] is feasible. Testing for combi3:
-- combi1=[1, 0, 1], combi2=[0, 1, 0], combi3=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 0, 1], combi2=[0, 1, 0], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 0, 1], combi2=[0, 1, 0], combi3=[1, 0, 1] is feasible but more expensive than current minimum
-- combi1=[1, 0, 1], combi2=[0, 1, 0], combi3=[1, 1, 1] is feasible but more expensive than current minimum
- combi1=[1, 0, 1], combi2=[1, 0, 1] will be more expensive than current minimum
- combi1=[1, 0, 1], combi2=[1, 1, 1] will be more expensive than current minimum

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] is feasible but more expensive than current minimum
- combi1=[1, 1, 1], combi2=[0, 1, 0] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1] is feasible but more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1] is feasible but more expensive than current minimum
- combi1=[1, 1, 1], combi2=[1, 0, 1] will be more expensive than current minimum
- combi1=[1, 1, 1], combi2=[1, 1, 1] will be more expensive than current minimum
Minimum cost 1.41$ achieved for {'combi1': [0, 1, 0], 'combi2': [1, 1, 1], 'combi3': [1, 1, 1], 'combi4': [1, 1, 1]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 3.0 (2h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [0, 1, 0]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 57.3 seconds.

Initial state
B     -- 316.6 | S        312.6 --    314.6 --   311.0 --
         319.4 |          311.6       315.0      311.0
         320.9 |          310.9       314.6      312.0
      -- 321.3 |       -- 310.4    -- 313.7   -- 314.0

Next state
B -0.1-> 312.2 | S        308.0 ->    308.3 ->   311.0 -0.3->
         313.4 |          308.0       308.1      310.0
         314.4 |          308.0       308.0      309.0
  <-0.1- 315.8 |   -0.3-> 308.0    -> 308.0   -> 309.0

Q_HP = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Cost of next 4 hours: 1.41 $
[45.56, 26.42, 18.0, 17.17]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [312.20361965132133, 313.3575849904227, 314.4149651708892, 315.7846982961043] 
Storage: [310.63745804318347, 309.83294642109223, 309.1538648825265, 308.6463399628248, 308.31533613678835, 308.1305728936636, 308.0444125797204, 308.0118685079554, 308.0023280544586, 308.0002952517525, 308.0000155586334, 307.9999971172413]
Electricity forecasts: [26.42, 18.0, 17.17, 16.19]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] has cost 1.99 $.
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 2.047 $.
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 1.967 $.
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] has cost 1.895 $.
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0], combi4=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0], combi4=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] has cost 2.079 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.83 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] has cost 1.943 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 1.809 $.
Minimum cost 1.81$ achieved for {'combi1': [1, 1, 1], 'combi2': [1, 1, 1], 'combi3': [1, 1, 1], 'combi4': [1, 1, 1]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 4.0 (3h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 21.6 seconds.

Initial state
B     -- 312.2 | S        308.0 --    308.3 --   311.0 --
         313.4 |          308.0       308.1      310.0
         314.4 |          308.0       308.0      309.0
      -- 315.8 |       -- 308.0    -- 308.0   -- 309.0

Next state
B -0.3-> 311.1 | S        308.0 <-    308.3 <-   311.0 <-0.0-
         311.3 |          308.0       308.1      310.0
         311.6 |          308.0       308.0      309.0
  <-0.3- 311.8 |   <-0.0- 308.0    <- 308.0   <- 309.0

Q_HP = [8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8053, 8158]
Cost of next 4 hours: 1.81 $
[26.42, 18.0, 17.17, 16.19]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [311.09991352530346, 311.3141417765383, 311.56969672309566, 311.8295967784621] 
Storage: [310.6374575532517, 309.83294617097306, 309.15386467140297, 308.6463398050374, 308.31533603388084, 308.13057283622163, 308.04441255293364, 308.01186849783755, 308.0023280514924, 308.0002952511205, 308.0000155585465, 307.9999971172355]
Electricity forecasts: [18.0, 17.17, 16.19, 30.74]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] is feasible. Testing for combi2:
- combi1=[1, 0, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
- combi1=[1, 0, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] has cost 2.141 $.
-- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 2.149 $.
- combi1=[1, 0, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] has cost 2.135 $.
-- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.78 $.
--- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] will be more expensive than current minimum

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.802 $.
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] will be more expensive than current minimum
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] has cost 1.811 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.648 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] has cost 1.691 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] will be more expensive than current minimum
Minimum cost 1.65$ achieved for {'combi1': [1, 1, 1], 'combi2': [1, 1, 1], 'combi3': [1, 1, 1], 'combi4': [0, 0, 0]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 5.0 (4h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [0, 0, 0]

Solving the optimization problem...
Done in 18.6 seconds.

Initial state
B     -- 311.1 | S        308.0 --    308.3 --   311.0 --
         311.3 |          308.0       308.1      310.0
         311.6 |          308.0       308.0      309.0
      -- 311.8 |       -- 308.0    -- 308.0   -- 309.0

Next state
B -0.3-> 311.0 | S        308.0 <-    308.3 <-   311.0 <-0.0-
         311.0 |          308.0       308.1      310.0
         311.0 |          308.0       308.0      309.0
  <-0.3- 311.0 |   <-0.0- 308.0    <- 308.0   <- 309.0

Q_HP = [8263, 8367, 8472, 8574, 8672, 8764, 8848, 8924, 8990, 9048, 9097, 9138, 9172, 9200, 9222, 9240, 9255, 9266, 9275, 9282, 9287, 9292, 9295, 9297, 9299, 9301, 9302, 9302, 9303, 9303]
Cost of next 4 hours: 1.65 $
[18.0, 17.17, 16.19, 30.74]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [310.999997899817, 311.0000126994479, 311.00013052983314, 311.0007422534204] 
Storage: [310.6374574461502, 309.83294593334585, 309.1538644708232, 308.6463396551304, 308.31533593611306, 308.1305727816489, 308.04441252748387, 308.0118684882248, 308.0023280486752, 308.00029525052025, 308.00001555846467, 307.9999971172304]
Electricity forecasts: [17.17, 16.19, 30.74, 31.17]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
- combi1=[1, 1, 1], combi2=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] has cost 1.945 $.
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] has cost 2.218 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.959 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] will be more expensive than current minimum
Minimum cost 1.95$ achieved for {'combi1': [1, 1, 1], 'combi2': [1, 1, 1], 'combi3': [0, 0, 0], 'combi4': [1, 1, 1]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 6.0 (5h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [0, 0, 0]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 38.9 seconds.

Initial state
B     -- 311.0 | S        308.0 --    308.3 --   311.0 --
         311.0 |          308.0       308.1      310.0
         311.0 |          308.0       308.0      309.0
      -- 311.0 |       -- 308.0    -- 308.0   -- 309.0

Next state
B -0.3-> 321.4 | S        308.0 <-    308.3 <-   311.0 <-0.0-
         320.5 |          308.0       308.1      310.0
         319.5 |          308.0       308.0      309.0
  <-0.3- 318.6 |   <-0.0- 308.0    <- 308.0   <- 309.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000]
Cost of next 4 hours: 1.95 $
[17.17, 16.19, 30.74, 31.17]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [321.40011833790356, 320.4654017974703, 319.5311751790672, 318.5968966874959] 
Storage: [310.63745525779836, 309.83294568800636, 309.153864263734, 308.64633950035835, 308.3153358351719, 308.1305727253043, 308.0444125012086, 308.01186847830036, 308.0023280457658, 308.0002952499004, 308.0000155583794, 307.9999971172253]
Electricity forecasts: [16.19, 30.74, 31.17, 16.18]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 1.706 $.
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] will be more expensive than current minimum
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] has cost 1.709 $.
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible but more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible but more expensive than current minimum
Minimum cost 1.71$ achieved for {'combi1': [1, 1, 1], 'combi2': [0, 0, 0], 'combi3': [1, 1, 1], 'combi4': [1, 1, 1]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 7.0 (6h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [0, 0, 0]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 23.5 seconds.

Initial state
B     -- 321.4 | S        308.0 --    308.3 --   311.0 --
         320.5 |          308.0       308.1      310.0
         319.5 |          308.0       308.0      309.0
      -- 318.6 |       -- 308.0    -- 308.0   -- 309.0

Next state
B -0.3-> 330.4 | S        308.0 <-    308.3 <-   311.0 <-0.0-
         329.5 |          308.0       308.1      310.0
         328.5 |          308.0       308.0      309.0
  <-0.3- 327.6 |   <-0.0- 308.0    <- 308.0   <- 309.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000]
Cost of next 4 hours: 1.71 $
[16.19, 30.74, 31.17, 16.18]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [330.39830569048934, 329.46380968409386, 328.52931360737483, 327.5948174330354] 
Storage: [310.6374503131348, 309.832945440216, 309.15386405457537, 308.6463393440396, 308.31533573322196, 308.13057266839695, 308.044412474671, 308.01186846827676, 308.00232804282746, 308.00029524927436, 308.00001555829334, 307.9999971172202]
Electricity forecasts: [30.74, 31.17, 16.18, 17.11]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] is feasible. Testing for combi2:
- combi1=[0, 0, 0], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[0, 0, 0], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[0, 0, 0], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[0, 0, 0], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[0, 0, 0], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[0, 0, 0], combi2=[1, 0, 1], combi3=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[0, 0, 0], combi2=[1, 0, 1], combi3=[1, 1, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[0, 0, 0], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] has cost 1.68 $.
-- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.692 $.
--- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[0, 0, 0], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 1.526 $.

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] is feasible. Testing for combi2:
- combi1=[1, 0, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] will be more expensive than current minimum
-- combi1=[1, 0, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] will be more expensive than current minimum

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.676 $.
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[1, 0, 1] has cost 1.684 $.
--- combi1=[1, 1, 1], combi2=[0, 0, 0], combi3=[1, 1, 1], combi4=[1, 1, 1] has cost 1.529 $.
- combi1=[1, 1, 1], combi2=[0, 1, 0] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1], combi4=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.694 $.
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[0, 1, 0], combi3=[1, 1, 1], combi4=[1, 1, 1] will be more expensive than current minimum
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] is feasible but more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] will be more expensive than current minimum
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] has cost 2.223 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] is feasible but more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] will be more expensive than current minimum
Minimum cost 1.53$ achieved for {'combi1': [0, 0, 0], 'combi2': [1, 1, 1], 'combi3': [1, 1, 1], 'combi4': [1, 1, 1]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 8.0 (7h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [0, 0, 0]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 28.0 seconds.

Initial state
B     -- 330.4 | S        308.0 --    308.3 --   311.0 --
         329.5 |          308.0       308.1      310.0
         328.5 |          308.0       308.0      309.0
      -- 327.6 |       -- 308.0    -- 308.0   -- 309.0

Next state
B <-0.1- 317.8 | S        308.0 ->    308.1 ->   309.0 -0.1->
         313.3 |          308.0       308.0      309.0
         310.0 |          308.0       308.0      308.0
  -0.1-> 308.3 |   -0.1-> 308.0    -> 308.0   -> 308.0

Q_HP = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Cost of next 4 hours: 1.53 $
[30.74, 31.17, 16.18, 17.11]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [317.83045375419465, 313.2995386872618, 309.9620534564258, 308.3007326636017] 
Storage: [308.9680938171894, 308.563421160222, 308.2946107201418, 308.13627335563007, 308.05472701968426, 308.01864280535443, 308.0052244014319, 308.00115258813685, 308.00018552586437, 308.00001711279805, 308.00001780557295, 307.99999698570866]
Electricity forecasts: [31.17, 16.18, 17.11, 20.24]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] is feasible. Testing for combi2:
- combi1=[1, 0, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 0, 1], combi2=[1, 1, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
- combi1=[1, 1, 1], combi2=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] has cost 2.175 $.
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] has cost 2.196 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] has cost 2.196 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] has cost 2.176 $.
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.941 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] will be more expensive than current minimum
Minimum cost 1.94$ achieved for {'combi1': [1, 1, 1], 'combi2': [1, 1, 1], 'combi3': [1, 1, 1], 'combi4': [0, 0, 0]}
Data was appended to results_2023-12-29_23-11-22.csv
#########################################

-----------------------------------------------------
Iteration 9.0 (8h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [0, 0, 0]

Solving the optimization problem...
Done in 17.9 seconds.

Initial state
B     -- 317.8 | S        308.0 --    308.1 --   309.0 --
         313.3 |          308.0       308.0      309.0
         310.0 |          308.0       308.0      308.0
      -- 308.3 |       -- 308.0    -- 308.0   -- 308.0

Next state
B -0.3-> 311.0 | S        308.0 <-    308.1 <-   309.0 <-0.0-
         311.0 |          308.0       308.0      309.0
         311.1 |          308.0       308.0      308.0
  <-0.3- 311.3 |   <-0.0- 308.0    <- 308.0   <- 308.0

Q_HP = [12695, 12025, 11139, 10055, 8956, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8036, 8131, 8229, 8331, 8435, 8538, 8639, 8735, 8823, 8902]
Cost of next 4 hours: 1.94 $
[31.17, 16.18, 17.11, 20.24]
[0.2640000000000002, 0.2640000000000002, 0.2640000000000002, 0.2640000000000002]

#########################################
Buffer: [311.0047545256684, 311.0331591784211, 311.11442645000045, 311.26495755161346] 
Storage: [308.968093106013, 308.56342103657516, 308.2946106380072, 308.13627330725035, 308.05472699476826, 308.01864279432885, 308.0052243973317, 308.0011525868925, 308.00018552556924, 308.000017112747, 308.00001780557295, 307.99999698570184]
Electricity forecasts: [16.18, 17.11, 20.24, 24.94]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
^CCasADi - 2023-12-30 09:43:05 WARNING("KeyboardInterruptException") [.../casadi/interfaces/ipopt/ipopt_nlp.cpp:132]
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] could not be solved: 'NonIpopt_Exception_Thrown'
^C^C^CTraceback (most recent call last):
  File "/Users/thomasdefauw/miniconda3/envs/ada/lib/python3.8/site-packages/casadi/casadi.py", line 13974, in <lambda>
    __setattr__ = lambda self, name, value: _swig_setattr(self, MX, name, value)
KeyboardInterrupt

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "master.py", line 68, in <module>
    if file_path == "": sequence = forecasts.get_optimal_sequence(x_0, 30*iter, x_opt, u_opt)
  File "/Users/thomasdefauw/Desktop/repo/gridworks/forecasts.py", line 239, in get_optimal_sequence
    
  File "/Users/thomasdefauw/Desktop/repo/gridworks/forecasts.py", line 160, in one_iteration
    u_opt, x_opt, obj_opt, error = optimizer.optimize_N_steps(x_0, 0, iter, pb_type, sequence, warm_start, False)
  File "/Users/thomasdefauw/Desktop/repo/gridworks/optimizer.py", line 245, in optimize_N_steps
    opti.subject_to(get_function("Q_HP", u[:,t], x[:,t], a, real, approx, t, sequence) <= Q_HP_max[t])
  File "/Users/thomasdefauw/Desktop/repo/gridworks/functions.py", line 304, in get_function
    f = functions_exact_sym(id, u, x, combi)
  File "/Users/thomasdefauw/Desktop/repo/gridworks/functions.py", line 172, in functions_exact_sym
    "Q_conv_B3":    (1-delta_bu) * (m_buffer * cp * (T_B4 - T_B3)) + delta_bu * (m_buffer * cp * (T_B2 - T_B3)),
  File "/Users/thomasdefauw/miniconda3/envs/ada/lib/python3.8/site-packages/casadi/casadi.py", line 9039, in __mul__
    def __mul__(x, y): return _casadi.times(x, y)
SystemError: <built-in function times> returned a result with an error set
(ada) thomasdefauw@mbp gridworks % 
(ada) thomasdefauw@mbp gridworks % 
(ada) thomasdefauw@mbp gridworks % 
