(ada) thomasdefauw@Macbook-pro-2011 gridworks % python master.py

Problem type: Non-linear
Variables: Continuous (relaxed or fixed binary)
Solver: Ipopt

Time step: 2 minutes
Horizon: 4.0 hours (120 time steps)
Simulation: 10 hours (10 iterations)

Results file (enter to skip): /Users/thomasdefauw/Desktop/repo/gridworks/data/sequence/warm-start_min-T_4hour/results_2023-12-29_23-11-22.csv 

-----------------------------------------------------
Iteration 1.0 (0h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [0, 0, 0]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

Done in 61.2 seconds.

Initial state
B     -- 314.0 | S        310.0 --    310.0 --   310.0 --
         314.6 |          310.0       310.0      310.0
         313.7 |          310.0       310.0      310.0
      -- 308.8 |       -- 310.0    -- 310.0   -- 310.0

Next state
B -0.3-> 323.2 | S        310.0 <-    310.0 <-   310.0 <-0.0-
         322.2 |          310.0       310.0      310.0
         321.3 |          310.0       310.0      310.0
  <-0.3- 320.4 |   <-0.0- 310.0    <- 310.0   <- 310.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000]
Cost of next 4 hours: 1.78 $
[14.64, 18.93, 45.56, 26.42]

-----------------------------------------------------
Iteration 2.0 (1h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [0, 1, 0]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 53.8 seconds.

Initial state
B     -- 323.2 | S        310.0 --    310.0 --   310.0 --
         322.2 |          310.0       310.0      310.0
         321.3 |          310.0       310.0      310.0
      -- 320.4 |       -- 310.0    -- 310.0   -- 310.0

Next state
B -0.1-> 316.6 | S        312.6 <-    314.6 <-   311.0 <-0.2-
         319.4 |          311.6       315.0      311.0
         320.9 |          310.9       314.6      312.0
  <-0.1- 321.3 |   <-0.2- 310.4    <- 313.7   <- 314.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 11966, 10559, 10557, 10552, 10544, 9583, 8000, 8000, 8000, 8000, 10302, 10189]
Cost of next 4 hours: 1.6 $
[18.93, 45.56, 26.42, 18.0]

-----------------------------------------------------
Iteration 3.0 (2h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [0, 1, 0]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 56.5 seconds.

Initial state
B     -- 316.6 | S        312.6 --    314.6 --   311.0 --
         319.4 |          311.6       315.0      311.0
         320.9 |          310.9       314.6      312.0
      -- 321.3 |       -- 310.4    -- 313.7   -- 314.0

Next state
B -0.1-> 312.2 | S        308.0 ->    308.3 ->   311.0 -0.3->
         313.4 |          308.0       308.1      310.0
         314.4 |          308.0       308.0      309.0
  <-0.1- 315.8 |   -0.3-> 308.0    -> 308.0   -> 309.0

Q_HP = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Cost of next 4 hours: 1.41 $
[45.56, 26.42, 18.0, 17.17]

-----------------------------------------------------
Iteration 4.0 (3h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 21.3 seconds.

Initial state
B     -- 312.2 | S        308.0 --    308.3 --   311.0 --
         313.4 |          308.0       308.1      310.0
         314.4 |          308.0       308.0      309.0
      -- 315.8 |       -- 308.0    -- 308.0   -- 309.0

Next state
B -0.3-> 311.1 | S        308.0 <-    308.3 <-   311.0 <-0.0-
         311.3 |          308.0       308.1      310.0
         311.6 |          308.0       308.0      309.0
  <-0.3- 311.8 |   <-0.0- 308.0    <- 308.0   <- 309.0

Q_HP = [8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8053, 8158]
Cost of next 4 hours: 1.81 $
[26.42, 18.0, 17.17, 16.19]

-----------------------------------------------------
Iteration 5.0 (4h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [0, 0, 0]

Solving the optimization problem...
Done in 18.1 seconds.

Initial state
B     -- 311.1 | S        308.0 --    308.3 --   311.0 --
         311.3 |          308.0       308.1      310.0
         311.6 |          308.0       308.0      309.0
      -- 311.8 |       -- 308.0    -- 308.0   -- 309.0

Next state
B -0.3-> 311.0 | S        308.0 <-    308.3 <-   311.0 <-0.0-
         311.0 |          308.0       308.1      310.0
         311.0 |          308.0       308.0      309.0
  <-0.3- 311.0 |   <-0.0- 308.0    <- 308.0   <- 309.0

Q_HP = [8263, 8367, 8472, 8574, 8672, 8764, 8848, 8924, 8990, 9048, 9097, 9138, 9172, 9200, 9222, 9240, 9255, 9266, 9275, 9282, 9287, 9292, 9295, 9297, 9299, 9301, 9302, 9302, 9303, 9303]
Cost of next 4 hours: 1.65 $
[18.0, 17.17, 16.19, 30.74]

-----------------------------------------------------
Iteration 6.0 (5h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [0, 0, 0]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 38.2 seconds.

Initial state
B     -- 311.0 | S        308.0 --    308.3 --   311.0 --
         311.0 |          308.0       308.1      310.0
         311.0 |          308.0       308.0      309.0
      -- 311.0 |       -- 308.0    -- 308.0   -- 309.0

Next state
B -0.3-> 321.4 | S        308.0 <-    308.3 <-   311.0 <-0.0-
         320.5 |          308.0       308.1      310.0
         319.5 |          308.0       308.0      309.0
  <-0.3- 318.6 |   <-0.0- 308.0    <- 308.0   <- 309.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000]
Cost of next 4 hours: 1.95 $
[17.17, 16.19, 30.74, 31.17]

-----------------------------------------------------
Iteration 7.0 (6h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [0, 0, 0]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 23.3 seconds.

Initial state
B     -- 321.4 | S        308.0 --    308.3 --   311.0 --
         320.5 |          308.0       308.1      310.0
         319.5 |          308.0       308.0      309.0
      -- 318.6 |       -- 308.0    -- 308.0   -- 309.0

Next state
B -0.3-> 330.4 | S        308.0 <-    308.3 <-   311.0 <-0.0-
         329.5 |          308.0       308.1      310.0
         328.5 |          308.0       308.0      309.0
  <-0.3- 327.6 |   <-0.0- 308.0    <- 308.0   <- 309.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000]
Cost of next 4 hours: 1.71 $
[16.19, 30.74, 31.17, 16.18]

-----------------------------------------------------
Iteration 8.0 (7h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [0, 0, 0]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [1, 1, 1]

Solving the optimization problem...
Done in 27.7 seconds.

Initial state
B     -- 330.4 | S        308.0 --    308.3 --   311.0 --
         329.5 |          308.0       308.1      310.0
         328.5 |          308.0       308.0      309.0
      -- 327.6 |       -- 308.0    -- 308.0   -- 309.0

Next state
B <-0.1- 317.8 | S        308.0 ->    308.1 ->   309.0 -0.1->
         313.3 |          308.0       308.0      309.0
         310.0 |          308.0       308.0      308.0
  -0.1-> 308.3 |   -0.1-> 308.0    -> 308.0   -> 308.0

Q_HP = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Cost of next 4 hours: 1.53 $
[30.74, 31.17, 16.18, 17.11]

-----------------------------------------------------
Iteration 9.0 (8h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [0, 0, 0]

Solving the optimization problem...
Done in 17.7 seconds.

Initial state
B     -- 317.8 | S        308.0 --    308.1 --   309.0 --
         313.3 |          308.0       308.0      309.0
         310.0 |          308.0       308.0      308.0
      -- 308.3 |       -- 308.0    -- 308.0   -- 308.0

Next state
B -0.3-> 311.0 | S        308.0 <-    308.1 <-   309.0 <-0.0-
         311.0 |          308.0       308.0      309.0
         311.1 |          308.0       308.0      308.0
  <-0.3- 311.3 |   <-0.0- 308.0    <- 308.0   <- 308.0

Q_HP = [12695, 12025, 11139, 10055, 8956, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8036, 8131, 8229, 8331, 8435, 8538, 8639, 8735, 8823, 8902]
Cost of next 4 hours: 1.94 $
[31.17, 16.18, 17.11, 20.24]

#########################################
Buffer: [311.0047545256684, 311.0331591784211, 311.11442645000045, 311.26495755161346] 
Storage: [308.968093106013, 308.56342103657516, 308.2946106380072, 308.13627330725035, 308.05472699476826, 308.01864279432885, 308.0052243973317, 308.0011525868925, 308.00018552556924, 308.000017112747, 308.00001780557295, 307.99999698570184]
Electricity forecasts: [16.18, 17.11, 20.24, 24.94]

Searching for optimal sequence...

******* combi1=[0, 0, 0] *******
combi1 = [0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[0, 1, 0] *******
combi1 = [0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 0, 1] *******
combi1 = [1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'

******* combi1=[1, 1, 1] *******
combi1 = [1, 1, 1] is feasible. Testing for combi2:
- combi1=[1, 1, 1], combi2=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[1, 0, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 0, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
-- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 0, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] could not be solved: 'Infeasible_Problem_Detected'
- combi1=[1, 1, 1], combi2=[1, 1, 1] is feasible. Testing for combi3:
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 0, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 0, 1] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 0, 0], combi4=[1, 1, 1] has cost 1.822 $.
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[0, 1, 0] could not be solved: 'Maximum_Iterations_Exceeded'
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 0, 0] has cost 1.885 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[0, 1, 0] could not be solved: 'Infeasible_Problem_Detected'
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 0, 1], combi4=[1, 1, 1] will be more expensive than current minimum
-- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1] is feasible. Testing for combi4:
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 0, 0] has cost 1.725 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[0, 1, 0] has cost 1.786 $.
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 0, 1] will be more expensive than current minimum
--- combi1=[1, 1, 1], combi2=[1, 1, 1], combi3=[1, 1, 1], combi4=[1, 1, 1] will be more expensive than current minimum
Minimum cost 1.73$ achieved for {'combi1': [1, 1, 1], 'combi2': [1, 1, 1], 'combi3': [1, 1, 1], 'combi4': [0, 0, 0]}
Data was appended to results_2023-12-30_09-47-37.csv
#########################################

-----------------------------------------------------
Iteration 10.0 (9h0min)
-----------------------------------------------------

Setting all constraints with the requested sequence...
0h00-0h30: [1, 1, 1]
0h30-1h00: [1, 1, 1]
1h00-1h30: [1, 1, 1]
1h30-2h00: [0, 0, 0]

Solving the optimization problem...
Done in 25.6 seconds.

Initial state
B     -- 311.0 | S        308.0 --    308.1 --   309.0 --
         311.0 |          308.0       308.0      309.0
         311.1 |          308.0       308.0      308.0
      -- 311.3 |       -- 308.0    -- 308.0   -- 308.0

Next state
B -0.3-> 321.5 | S        308.0 <-    308.1 <-   309.0 <-0.0-
         320.6 |          308.0       308.0      309.0
         319.6 |          308.0       308.0      308.0
  <-0.3- 318.7 |   <-0.0- 308.0    <- 308.0   <- 308.0

Q_HP = [14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000, 14000]
Cost of next 4 hours: 1.73 $
[16.18, 17.11, 20.24, 24.94]

Plotting the data...
2023-12-30 10:38:59.668 python[1917:191096] ASB: LNW <NSApplication: 0x7fec32a51270> <Window: 0x7fec32d727b0> <NSThemeFrame: 0x7fec32bddfd0> (null)
2023-12-30 10:48:31.157 python[1917:191096] ASB: LNW <NSApplication: 0x7fec32a51270> <NSSavePanel: 0x7fec32d5bd50> <NSThemeFrame: 0x7fec32d954e0> <_NSViewBackingLayer: 0x7fec32d8b770>

